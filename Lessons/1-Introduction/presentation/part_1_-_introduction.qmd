---
title: "ML Course Part 1 - Introduction to Machine Learning"
author: "Alexandre Bry"
bibliography: references.bib
csl: numeric-superscript.csl
slide-level: 3
reference-location: document
include-after-body: include-after-body.html
format:
  revealjs:
    slideHeaders: true
    # theme: [default, _extensions/grantmcdermott/clean/clean.scss]
    smaller: true
    slide-number: true
    show-slide-number: all
    css: [styles.css]
    code-overflow: wrap
    code-line-numbers: false
    header: "Introduction to Machine Learning"
    sc-sb-title	: true
    incremental: false
    embed-resources: false
    # scrollable: true
execute: 
  echo: true
filters:
  - reveal-header
---

# Introduction

### Definition

::: {.definition-block}
Machine Learning (ML)

Feeding **data** into a computer **algorithm** in order to learn **patterns** and make **predictions** in new and different **situations**.
:::

::: {.definition-block}
ML Model

**Computer object** implementing a **ML algorithm**, trained on a **set of data** to perform a **given task**.
:::

# Definitions

## Categories of ML

### Type of dataset

- **Supervised**: for each input in the dataset, the expected output is also part of the dataset
- **Unsupervised**: for each input in the dataset, the expected output is **not** part of the dataset
- **Semi-supervised**: only a portion of the inputs of the dataset have their expected output in the dataset
- **Reinforcement**: there is no predefined dataset, but an environment giving feedback to the model when it takes actions

### Type of output

- **Classification**: assigning one (or multiple) label(s) chosen from a given list of classes to each element of the input
- **Regression**: assigning one (or multiple) value(s) chosen from a continuous set of values
- **Clustering**: create categories by grouping together similar inputs

## Dataset

### Dataset

::: {.definition-block}
Dataset

A collection of data used to train, validate and test ML models. 
:::

### Content

::: {.definition-block}
Instance (or sample)

An instance is one individual entry of the dataset.
:::

::: {.definition-block}
Feature (or attribute or variable)

A feature is a type of information stored in the dataset about each instance.
:::

::: {.definition-block}
Label (or target or output or class)

A label is a piece of information that the model must learn to predict.
:::

### Subsets

::: {.definition-block}
Dataset subsets

A ML dataset is usually subdivided into three disjoint subsets, with distinctive role in the training process:

- **Training set**: used during training to train the model,
- **Validation set**: used during training to assess the generalization capability of the model, tune hyperparameters and prevent overfitting,
- **Test set**: used after training to evaluate the performance of the model on new data it has not encountered before.
:::

# Overview of ML methods

## Supervised Learning

### Linear Regression

Used for predicting continuous values:

::: {.nonincremental}
- **Simple**: $y = \alpha + \beta x$
- **Multiple**: $y = \alpha + \beta_1 x_1 + \beta_2 x_2 + \cdots + \beta_n x_n$
- **Polynomial**: $y = \alpha + \beta_1 x + \beta_2 x^2 + \cdots + \beta_n x^n$
- and many others...
:::

![Simple Linear Regression [@anscombe2011]](images/Linear_regression.svg){height="300px"}

### Logistic Regression

Used for classification problems:

::: {.nonincremental}
- **Binomial**: only two possible categories
- **Multinomial**: three or more possible categories
- **Ordinal**: three or more possible categories which are ordered
:::

![Binomial Logistic Regression [@canley2021]](images/Logistic_regression.svg){height="350px"}

### Decision Trees

A tree-like structure used for both classification and regression

![Decision Tree [@blackdragon2015]](images/Decision_tree.png){height="500px"}

### Random Forests

An ensemble method that combines multiple decision trees:

- Train independently $B$ trees using:
  - **Bagging**: each tree is fitted on a random subset of the training set
  - **Feature bagging**: each split in the decision tree (i.e. each node) is chosen among a subset of the features
- Take a decision by aggregating individual decisions of each tree

### Boosting

An ensemble method that combines weak learners (usually decision trees) to form a stronger model:

- Choose a simple **base learner** (e.g. small decision trees with fixed number of leaves)
- Repeatedly:
  1. Train a new base learner on the weighted training set
  2. Add this new learner to the ensemble
  3. Evaluate the performance of the ensemble
  4. Give more weight in the training set to misclassified data

### K-Nearest Neighbors (KNN)

A non-parametric method for classification and regression

![K-NN Classification [@ajanki2008]](images/KnnClassification.svg){height="500px"}

### Naive Bayes

A probabilistic classifier based on Bayes' theorem.

### Support Vector Machines (SVM)

Used for classification and regression, effective in high-dimensional spaces:

::: {.nonincremental}
- Separate the feature space using optimal hyperplanes
- Features are mapped in a higher dimensional space to allow to fit non-linearly in the original feature space
:::

![SVM kernel trick: map features to a higher dimensional space to be able to separate classes using a hyperplane [@zirguezi2015]](images/SVM_Kernel_Machine.svg){height="350px"}

## Unsupervised Learning

### K-Means Clustering

:::: {.columns}
::: {.column}

A method for partitioning data into $k$ clusters:

::: {.nonincremental}
- $k$ must be chosen a priori
- The principle is to start with random centroids and then iteratively:
  1. Classify points using the closest centroid
  2. Move each centroid to the real centroid of its class
- Classical method with lots of variation
:::

:::
::: {.column}

![$k$-Means Clustering convergence process [@chire_kmeans]](images/K-means_convergence.gif){height="500px"}

:::
::::

### Hierarchical Clustering

Builds a hierarchy of clusters using either agglomerative or divisive methods:

::: {.nonincremental}
- Build a full hierarchy top-down (divisive) or bottom-up (agglomerative)
- Create any number of clusters by cutting the tree
:::

![Hierarchical Clustering [@sideris2005]](images/Hierarchical_clustering_simple_diagram.svg){height="350px"}

### Density-Based Spatial Clustering of Applications with Noise (DBSCAN)

Clustering based on the density of data points:

::: {.nonincremental}
- Divides points in 4 categories: core points (in red below), directly reachable (yellow), reachable and outliers (blue)
- Only two parameters: radius size ($\epsilon$) and number of neighbors to be core ($min_{pts}$)
:::

::: {.columns}
::: {.column}
![DBSCAN Illustration [@chire_dbscan_illustration]](images/DBSCAN-Illustration.svg){height="250px"}
:::
::: {.column}
![DBSCAN Result [@chire_dbscan_result]](images/DBSCAN-Result.svg){height="250px"}
:::
:::

### Principal Component Analysis (PCA)

Dimensionality reduction technique to project data into lower dimensions:

::: {.nonincremental}
- Project data into a space of lower dimension
- Keep as much variance (so as much information) as possible
:::

![PCA Illustration [@nicoguaro2015]](images/GaussianScatterPCA.svg){height="350px"}

### t-Distributed Stochastic Neighbor Embedding (t-SNE)

A nonlinear dimensionality reduction technique primarily used for visualization of high-dimensional data

![t-SNE Result on MNIST dataset [@mcdonald2017]](images/T-SNE_Embedding_of_MNIST.png){height="400px"}

## Reinforcement Learning

### Definitions

![Reinforcement Learning Framework [@megajuice2017]](images/Reinforcement_learning_diagram.svg){height="500px"}

### Definitions

::: {.definition-block}
Policy (in RL)

Function that returns an action given the state of the environment.
:::

::: {.definition-block}
On-Policy vs. Off-Policy

Refers to the policy that is used to update the knowledge during training. On-Policy uses the learnt policy, while Off-Policy uses the optimal policy.
:::

### Q-Learning / SARSA - Similarities

:::: {.columns}
::: {.column}
A value-based reinforcement learning algorithm:

- Iteratively learn the expected output of each action in each situation
- Limited to discrete and simple environments
- Neural Network variants (like **Deep Q-Learning**) allow to handle more complex environments
:::
::: {.column}
![Q-Learning Table [@learndatasci2018]](images/Q-Learning_Matrix_Initialized_and_After_Training.png)
:::
::::

### Q-Learning / SARSA - Differences

The two methods differ by the estimation of the reward that is used to update the Q-table:

::: {.nonincremental}
- Q-Learning (Off-Policy) uses the best possible reward: $Q(s,a) \leftarrow Q(s,a) + \alpha(r + \gamma Q(s',a') - Q(s,a))$
- SARSA (On-Policy) uses the reward of the next action: $Q(s,a) \leftarrow Q(s,a) + \alpha(r + \gamma \max_{a''} Q(s',a'') - Q(s,a))$
:::

where:

::: {.nonincremental}
- $a$ is the action taken while the environment is in state $s$, leading to state $s'$ where action $a'$ will be taken
- $\alpha$ is the learning rate
- $r$ is the reward received after taking action $a$ in state $s$ and arriving in state $s'$
- $\gamma$ is the discount factor defining how much we value long-term rewards relatively to short-term rewards
:::

### Policy Gradient Methods

Given a model defined with a certain number of parameters, optimize the policy by adjusting these parameters in the direction that improves performance (e.g., REINFORCE algorithm)

### Actor-Critic Methods

Combination of an *Actor* and a *Critic* learning simultaneously:

- The Actor learns the policy through a parametrized function
- The Critic estimates the value of each action and gives feedback to the Actor

# Introduction to Neural Networks (NN)

### Definition

::: {.definition-block}
Neural Network (NN)

**Subtype of ML model** inspired from *brains*. Composed of several **interconnected layers** of nodes capable of **processing** and **passing** information.
:::

## Structure of a NN model

### Basic Elements

::: {.definition-block}
Neuron

Takes multiple inputs, sums them with weights and passes the result as output.
:::

::: {.definition-block}
Layer

Set of similar neurons taking different inputs and/or having different weights.
:::

::: {.definition-block}
Neural Network (NN)

Sequence of layers.
:::

### Linear Functions

::: {.definition-block}
Linear Function

Function that can be written like this:
$$
f(\alpha_1, \cdots, \alpha_n) = (\beta_{1,1} \alpha_1 + \cdots + \beta_{1,n} \alpha_n, \cdots, \beta_{m,1} \alpha_1 + \cdots + \beta_{m,n} \alpha_n)
$$
:::

::: {.theorem-block}
Composition of Linear Functions

The composition of any number of linear functions is a linear function.
:::

### Activation Functions - Definition

::: {.definition-block}
Activation Function

Function applied to the output of a NN layer (i.e. to the output of each of its neurons) to introduce **non-linearity** to the model.
:::

Activation functions allow to approximate much more complex functions, using a sequence of intertwined affine layers and activation layers.

### Activation Functions - Examples

::: {layout="[[1, 1], [1, 1]]"}
![Rectified linear unit (ReLU) [@laughsinthestocks_relu]](images/Activation_rectified_linear.svg){height="200px"}

![Hyperbolic tangent (tanh) [@laughsinthestocks_tanh]](images/Activation_tanh.svg){height="200px"}

![Logistic, sigmoid, or soft step [@laughsinthestocks_logistic]](images/Activation_logistic.svg){height="200px"}

![Leaky rectified linear unit (Leaky ReLU) [@laughsinthestocks_leaky_relu]](images/Activation_leaky_relu.svg){height="200px"}
:::

## Affine layers

### Fully Connected

The most basic layer, in which each output is a linear combination of each input (before the activation layer)

::: {layout="[60, 40]" layout-valign="center"}
![Fully Connected Layer [@unzueta_fully_connected]](images/fully-connected-layer.jpg)

![Fully Connected Layer [@unzueta_fully_connected]](images/fully-connected-layer_0.jpg)
:::

### Convolutional

A layer combining geographically close features, used a lot to process rasters.

::: {layout="[50, 50]" layout-valign="center"}
![2D Convolutional Layer [@unzueta_convolutional]](images/convolutional-layer.jpg)

![2D Convolutional Layer [@unzueta_convolutional]](images/convolutional-layer_0.jpg)
:::

### Recurrent

Type of layers designed to process sequential data such as text, time series data, speech or audio. Works by combining input data and the state of the previous time step.

The two main variants of recurrent layers are:

::: {layout="[50, 50]" layout-valign="center"}
![Long Short-Term Memory (LSTM) [@fdeloche_lstm]](images/Long_Short-Term_Memory.svg)

![Gated Recurrent Unit (GRU) [@fdeloche_gru]](images/Gated_Recurrent_Unit.svg)
:::

Nowadays, transformer architectures are however preferred to process sequential data.

### Pooling

A type of layers used to reduce the number of features by merging multiple features into one. There are multiple kinds of pooling layers, the most simple ones being Maximum Pooling and Average Pooling.

![Max Pooling Example [@godoy2023]](images/Convolutional_neural_network_maxpooling.png)

### Residual

A Residual Block aims at stabilizing training and convergence of deep neural networks (with a large number of layers), by adding the input of a given layer to the output of another layer further down in the architecture.

![Residual Block skipping two layers [@lunarLullaby2023]](images/ResBlock.png){height="400px"}

### Attention

Attention aims at determining relative importance of each part of the input to make better predictions. It is used a lot in natural language processing (NLP) and image processing.

![Attention mechanism in seq2seq with RNN [@google2023]](images/Seq2seq_with_RNN_and_attention_mechanism.gif)

### And a lot more...

- **Dropout**: randomly drop out some of the nodes during training to reduce overfitting
- **Batch Normalization**: normalize the input of each layer across the batch to improve training stability and speed
- **Layer Normalization**: normalize the input of each layer across the features to improve training stability and speed
- **Embedding**: transforms discrete input data into continuous vectors with lower-dimensional space
- **Flatten**: convert multi-dimensional data into 1D data that can be fed into fully connected layers
- ...

## NN training

### Loss Function - Definition

A loss function is a mathematical function that quantifies the difference between the network's predicted output and the actual target values. The goal during training is to minimize this loss by adjusting the model's weights, using gradient descent.

The most common loss functions are:

- Mean Squares Error (MSE) for regression
- Cross-entropy Loss for classification

### Loss Function - Differentiable

To be able to perform gradient descent, the loss function must be differentiable, which means continuous (no jump) and smooth (no sudden change of direction).

::: {layout-ncol=2}

![Examples of differentiable functions [@kwiatkowski2020]](images/Differentiable_functions.webp)

![Examples of non-differentiable functions [@kwiatkowski2020]](images/Not_differentiable_functions.webp)

:::

### Loss Function - Convex

To get the best results when performing gradient descent, it is also better if the function is convex. The simplest definition of convexity is that if you trace a straight line between two points on the curve, the curve will be below the segment between the two points.

![Example of convex and non-convex functions [@kwiatkowski2020]](images/Convex_functions.webp)

### Gradient Descent - Definition

::: {.definition-block}
Gradient Descent

The process of iteratively computing and following the direction of the gradient of a function to (hopefully) reach the minimum value of the function (if it exists).
:::

Gradient Descent works because at any point in the definition space of the function, the gradient points in the direction of the steepest angle. So locally, following this direction is the quickest way to get to the lower value of the function. If we come back to the requirements listed before:

- Differentiable functions are functions where the gradient exists everywhere
- Convex functions are convenient for gradient descent because they have only one minimum value and slowly going down the function will always lead to the minimum value.

### Gradient Descent - Algorithm

Gradient Descent boils down to iteratively:

1. Compute the gradient of the loss function at the current point
2. Make a step towards the direction of the gradient to a new point
3. Repeat step 1 until we stop

In this process, the three things that have to be defined are:

- The starting point (weights initialization)
- The size of the steps (learning rate)
- The condition to stop

### Gradient Descent - Weights initialization

The starting point is defined by the first output of the model, and therefore by the initial values of the weights of the model. There are numerous methods to initialize the weights, but the most common one is to randomly initialize them using a **centered and normalize Gaussian distribution**.

### Gradient Descent - Learning rate

The gradient gives us a direction and a norm, but this norm is arbitrary and has to be rescaled using what we call the **learning rate**. The learning rate doesn't define the size of the steps, but the scalar factor to apply to the gradient's norm, which means that the norm still plays a crucial role.

The choice of the learning rate is crucial to hopefully converge **quickly** to the **global** minimum loss.

![Example of gradient descent on the same function with different learning rates [@kwiatkowski2020]](images/Gradient_descent_different_learning_rates.webp)

### Gradient Descent - Stop condition

The stop condition determines when you decide to stop the algorithm. An easy solution is to choose a number of steps before launching the algorithm, but this will either imply useless computations after the algorithm has reached a final point, or stopping too early and not get the best results possible.

Therefore, although there are more complex methods, the most common and simple process is to monitor the value of the loss, memorize the lowest value ever reached, and stop when there has been a given number of steps without any improvement to the best value. Then, we usually keep the model weights corresponding to this best value.

### Gradient Descent - Unlucky examples

![Examples with a saddle point [@kwiatkowski2020]](images/Gradient_descent_different_learning_rates_saddle.webp){height="200px"}

![Animated example with a saddle point [@kwiatkowski2020]](images/Gradient_descent_unlucky_example.gif){height="250px"}

### Backpropagation

Gradient Descent is beautiful, but right now, we only know in which direction (the gradient) the **output** of the model should go. To transmit this information to the weights of the layers of the model, we use backpropagation.

::: {.definition-block}
Backpropagation

The process of computing the gradient of the weights of each layer of the model and modify them accordingly. The name comes from the process starting with the last layer of the model and propagating incrementally to the first layer.
:::

## Miscellaneous

### Playground

[Playground](https://playground.tensorflow.org/)

### YOLOv8 Model

![The architecture of YOLOv8 [@kwiatkowski2020]](images/YOLOv8-architecture.jpg){height=500px}

# Usual pipeline

### Overview

1. Data acquisition
2. Data preprocessing
3. Model selection
4. Model evaluation
5. Final model training

### Data acquisition

Gather the data, potentially from multiple different sources. Choosing the right sources can also depend on the choices made in the next steps.

## Data preprocessing

### Different issues

Multiple sources of issues and steps to perform:
1. Handle different formats
2. Remove outliers (mostly for raw data)
3. (Optionally) extract features
4. Handle missing data
5. Normalize

### Why normalization?

::: {.example-block}
Idea

*A priori* all features have the same importance, so none of them should have an advantage. Therefore, having features with larger values than others would be detrimental.
:::

Usually, all features are individually normalized over the whole dataset, to obtain a distribution with an average of 0 and a standard deviation of 1:

$$
\begin{align*}
\hat{X} & = \sum\limits_{j=0}^n X_j \\
\sigma_X & = \sum\limits_{j=0}^n (X_j - \hat{X})^2 \\
\forall k \in [0, \cdots, n ], X_k & = \frac{X_k - \hat{X}}{\sigma_X}
\end{align*}
$$

### Model selection

- Type of model (ML, NN, DL, ...)
- Complexity:
  - Number of features
  - Type of output
  - Size of the layers (for NN)
  - Number of layers (for NN)
- Hyperparameters

### Model training

- Loss selection: depends on the task, the objectives, the specific issues to solve
- Training process selection (lots of different tweaks and improvements can be implemented in NN training)
- Hyperparameter tuning, by repeatedly:
  - Selecting one or multiple configurations of hyperparameters
  - Training the model one or multiple times
  - Determining the best hyperparameters

### Model evaluation - Criteria

Criteria selection among the many possible ones:

::: {.fragment .nonincremental}
- For classification:
  - Accuracy: for balanced datasets
  - Precision: when false positives are costly
  - Recall: when false negatives are costly
  - F1-Score: when class distribution is unbalanced
  - ...
:::
::: {.fragment .nonincremental}
- For regression:
  - Mean Absolute Error (MAE)
  - Mean Square Error (MSE): more sensitive to large errors than MAE
  - ...
:::

### Model evaluation - Cross-validation

::: {.definition-block}
Cross-validation

Method to estimate real performance of the model by:
  1. Splitting the dataset in multiple parts (usually 5)
  2. For different combinations of these parts (usually 5), training and evaluating the model
:::

![Cross-validation [@gufosowa2019]](images/K-fold_cross_validation_EN.svg)

### Final model training

Once the data is preprocessed, the model is selected, the hyperparameters chosen and optimized, the final model can be trained multiple times to keep the best one.

# Challenges

## Data

- Quality
- Diversity
- Biases and fairness (example of crime prediction)

::: {.fragment .example-block}
Biases and fairness

Model architecture, training and evaluation also plays a major role in preventing biases, and can sometimes allow to build unbiased models using biased data.
:::

## Underfitting and Overfitting

### Definitions

::: {.fragment .definition-block}
Underfitting

When a model is too simple to properly extract information from a complex task. Can also be explained by key information missing in the input features.
:::

::: {.fragment .definition-block}
Overfitting

When a model is too complex to properly generalize to new data. Happens often when a NN is trained too long on a dataset that is not diverse enough and learns the noise in the data.
:::

### Illustrations

![Underfitting and overfitting on a regression task [@geeksforgeeksfitting]](images/Underfitting_and_Overfitting_Regression.webp){width="550px"}

![Underfitting and overfitting on a classification task [@geeksforgeeksfitting]](images/Underfitting_and_Overfitting_Classification.png){width="550px"}

### Solutions

| Solution | Underfitting | Overfitting |
| -------- | ------------ | ----------- |
| Complexity | Increase | Reduce |
| Number of features | Increase | Reduce |
| Regularization | Reduce | Increase |
| Training time | Increase | Reduce |

::: {.fragment}
General strategies:

- Cross-validation to identify problems
- Grid search/random search to tune hyperparameters and balance between underfitting and overfitting
- Ensemble methods to reduce overfitting by using many smaller models instead of one big
:::

## Interpretable and Explainable

### Definitions

::: {.definition-block}
Interpretable

Qualifies a ML model which decision-making process is straightforward and **transparent**, making it directly **understandable** by humans. This requires to restrict the model **complexity**.
:::

::: {.definition-block}
Explainable

Qualifies a ML model which decision-making process can be partly interpreted afterwards using **post hoc interpretation techniques**. These techniques are often used on models which are too complex to be interpreted.
:::

# Python libraries

## Data manipulation

### Libraries

::: {.fragment .nonincremental}
- [NumPy](https://numpy.org/)
  - Fast numerical operations
  - Matrices with any number of dimensions (called arrays)
  - Lots of convenient operators on arrays
:::
::: {.fragment .nonincremental}
- [Pandas](https://pandas.pydata.org/)
  - Can store any type of data
  - 1D or 2D tables (called DataFrames)
  - Lots of convenient operators on DataFrames
:::

### NumPy

```{python}
import numpy as np
```
```{python}
array = np.array([[0, 1], [2, 3]])
print(array)
```
```{python}
print(5 * array)
```
```{python}
print(np.pow(array, 3))
```
```{python}
print(array @ array)
```
```{python}
print(np.where(array < 2, 10 - array, array))
```

### Pandas {.scrollable}

```{python}
import pandas as pd
import numpy.random as npr
```
```{python}
df = pd.DataFrame([
    ["Pi", 3.14159, npr.randint(-100, 101, (2, 2))],
    ["Euler's number", 2.71828, npr.randint(-100, 101, (2, 2))],
    ["Golden ratio", 1.61803, npr.randint(-100, 101, (2, 2))]
  ], columns = ["Names", "Values", "Random numbers because why not"])
print(df)
```
```{python}
print(df[df["Values"] > 2])
```
```{python}
print(df[df["Names"].str.contains("n")])
```

## ML

### SciPy {.scrollable}

Scientific and technical computing based on NumPy. Documentation [here](https://scipy.org/)

```{python}
import scipy as sp
import numpy as np
```
```{python}
# Define a linear system Ax = b
A = np.array([[3, 2], [1, 4]])
b = np.array([6, 8])

# Solve the system
x = sp.linalg.solve(A, b)
print("Solution to the linear system Ax = b:", x)
```
```{python}
# Define a function to integrate
def integrand(x):
    return np.exp(-x**2/2)/np.sqrt(2*np.pi)

# Integrate the function from 0 to infinity
result, error = sp.integrate.quad(integrand, 0, np.inf)
print("Integral of exp(-x**2/2)/sqrt(2*np.pi) from 0 to infinity:", result)
```

### scikit-learn {.scrollable}

A lot of tools for ML (except DL). Documentation [here](https://scikit-learn.org/stable/index.html)

```{python}
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.datasets import make_regression, load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
```
```{python}
# Generate data, create and fit a Linear Regression model
X, y = make_regression(n_samples=100, n_features=1, noise=0.1)
model = LinearRegression()
model.fit(X, y)

print("Coefficient:", model.coef_, "Intercept:", model.intercept_)
```
```{python}
# Load the iris dataset and split it in training and test
iris = load_iris()
X, y = iris.data, iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit a random forest classifier on training data, and use it
clf = RandomForestClassifier()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
```

## NN

### PyTorch / TensorFlow / Keras

- [PyTorch](https://pytorch.org/):
  - Flexibility, ease of debugging, beginner-friendly
  - Favored in academia and by researchers
- [TensorFlow](https://www.tensorflow.org/):
  - Scalable, production-ready and easy deployment
  - Favored in production and industry
- [Keras](https://keras.io/):
  - User-friendly, high-level and powerful with TensorFlow integration
  - Favored for first hands-on experience for beginners and for prototyping

## Visualization

### Matplotlib

[Examples](https://matplotlib.org/stable/plot_types/index.html#plot-types)

### Plotly

[Examples](https://plotly.com/python/)

### Seaborn

[Examples](https://seaborn.pydata.org/examples/index.html)

# Resources

## Machine Learning

- GeeksforGeeks:
  - [GeeksforGeeks Introduction to Machine Learning](https://www.geeksforgeeks.org/introduction-machine-learning/)
  - [GeeksforGeeks 7 Major ML Challenges](https://www.geeksforgeeks.org/7-major-challenges-faced-by-machine-learning-professionals/)
  - [GeeksforGeeks Explainable and Interpretable](https://www.geeksforgeeks.org/what-is-the-difference-between-explainable-and-interpretable-machine-learning/)
  - [Interpretable Machine Learning, Christoph Molnar](https://christophm.github.io/interpretable-ml-book/)

## References